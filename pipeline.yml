trigger:
- main
    
pool:
  name: 'Azure Pipelines'

variables:
  azureServiceConnectionName: 'ScottDemoAzure'
  rgName: 'Demo-LoadTestApp2'
  location: 'AustraliaEast'

stages:
- stage: Build
  jobs:
  - job: BuildDemo
    steps:
    - script: mkdir -p $(Build.ArtifactStagingDirectory)/{deploy,app,test}
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureServiceConnectionName)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az bicep build -f ./deploy/deploy.bicep --outfile $(Build.ArtifactStagingDirectory)/deploy/deploy.json'
        failOnStandardError: true
    - task: UseDotNet@2
      inputs:
        version: '7.x'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: ./src/DemoApp/DemoApp.csproj
    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        projects: ./src/DemoApp/DemoApp.csproj
        publishWebProjects: False
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/app'
        zipAfterPublish: True
    - task: CopyFiles@2
      inputs:
        SourceFolder: './test/loadtest'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/test'
    - publish: $(Build.ArtifactStagingDirectory)
      artifact: BuildArtifact

- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: 'DeployDemo'
    environment: 'Demo-LoadTestApp'
    variables:
      templatePath: '$(Pipeline.Workspace)/BuildArtifact/deploy/deploy.json'
      appZipPath: '$(Pipeline.Workspace)/BuildArtifact/app/DemoApp.zip'
    strategy: 
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: BuildArtifact
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureServiceConnectionName)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az group create -l $(location) -n $(rgName)'
              failOnStandardError: true
          - task: AzureCLI@2
            name: templateDeploy
            inputs:
              azureSubscription: $(azureServiceConnectionName)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az deployment group create -g $(rgName) -f ${{ variables.templatePath }} > deployment.json
                cat deployment.json
                jq '.properties.outputs | to_entries[] | "##vso[task.setvariable variable=\(.key);isOutput=true]\(.value.value)"' deployment.json | xargs -n 1 echo
              failOnStandardError: true
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureServiceConnectionName)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az functionapp deployment source config-zip -g $(rgName) -n $(templateDeploy.functionAppName) --src ${{ variables.appZipPath }}'
              failOnStandardError: true